name: CI/CD Pipeline

on:
  push:
    branches: [ main, develop ]
  pull_request:
    branches: [ main ]

env:
  AWS_REGION: ${{ secrets.AWS_REGION }}
  ECR_REGISTRY: ${{ secrets.ECR_REGISTRY }}
  EKS_CLUSTER_NAME: ${{ secrets.EKS_CLUSTER_NAME }}

jobs:
  # Backend CI/CD Job
  backend:
    name: Backend Build & Deploy
    runs-on: ubuntu-latest
    permissions:
      id-token: write
      contents: read
    
    steps:
    - name: Checkout code
      uses: actions/checkout@v4

    - name: Configure AWS credentials
      uses: aws-actions/configure-aws-credentials@v4
      with:
        role-to-assume: ${{ secrets.AWS_ROLE_ARN }}
        aws-region: ${{ env.AWS_REGION }}

    - name: Login to Amazon ECR
      id: login-ecr
      uses: aws-actions/amazon-ecr-login@v2

    - name: Set up Node.js
      uses: actions/setup-node@v4
      with:
        node-version: '18'
        cache: 'npm'
        cache-dependency-path: billing-backend/package-lock.json

    - name: Install backend dependencies
      run: |
        cd billing-backend
        npm ci

    - name: Run backend tests
      run: |
        cd billing-backend
        npm test

    - name: Build backend Docker image
      run: |
        cd billing-backend
        docker build -t $ECR_REGISTRY/billing-backend:$GITHUB_SHA .
        docker tag $ECR_REGISTRY/billing-backend:$GITHUB_SHA $ECR_REGISTRY/billing-backend:latest

    - name: Push backend image to ECR
      run: |
        docker push $ECR_REGISTRY/billing-backend:$GITHUB_SHA
        docker push $ECR_REGISTRY/billing-backend:latest

    - name: Update ArgoCD Application
      if: github.ref == 'refs/heads/main'
      run: |
        # This will trigger ArgoCD to sync the application
        echo "Backend image updated: $ECR_REGISTRY/billing-backend:$GITHUB_SHA"
        # In a real scenario, you might call ArgoCD API or update a config file
        # For now, we'll just log the update

  # Frontend CI/CD Job
  frontend:
    name: Frontend Build & Deploy
    runs-on: ubuntu-latest
    permissions:
      id-token: write
      contents: read
    
    steps:
    - name: Checkout code
      uses: actions/checkout@v4

    - name: Configure AWS credentials
      uses: aws-actions/configure-aws-credentials@v4
      with:
        role-to-assume: ${{ secrets.AWS_ROLE_ARN }}
        aws-region: ${{ env.AWS_REGION }}

    - name: Login to Amazon ECR
      id: login-ecr
      uses: aws-actions/amazon-ecr-login@v2

    - name: Set up Node.js
      uses: actions/setup-node@v4
      with:
        node-version: '18'
        cache: 'npm'
        cache-dependency-path: billing-frontend/package-lock.json

    - name: Install frontend dependencies
      run: |
        cd billing-frontend
        npm ci

    - name: Run frontend tests
      run: |
        cd billing-frontend
        npm test

    - name: Build frontend Docker image
      run: |
        cd billing-frontend
        docker build -t $ECR_REGISTRY/billing-frontend:$GITHUB_SHA .
        docker tag $ECR_REGISTRY/billing-frontend:$GITHUB_SHA $ECR_REGISTRY/billing-frontend:latest

    - name: Push frontend image to ECR
      run: |
        docker push $ECR_REGISTRY/billing-frontend:$GITHUB_SHA
        docker push $ECR_REGISTRY/billing-frontend:latest

    - name: Update ArgoCD Application
      if: github.ref == 'refs/heads/main'
      run: |
        # This will trigger ArgoCD to sync the application
        echo "Frontend image updated: $ECR_REGISTRY/billing-frontend:$GITHUB_SHA"

  # Security Scanning Job
  security:
    name: Security Scan
    runs-on: ubuntu-latest
    needs: [backend, frontend]
    
    steps:
    - name: Checkout code
      uses: actions/checkout@v4

    - name: Run Trivy vulnerability scanner
      uses: aquasecurity/trivy-action@master
      with:
        scan-type: 'fs'
        scan-ref: '.'
        format: 'sarif'
        output: 'trivy-results.sarif'

    - name: Upload Trivy scan results to GitHub Security tab
      uses: github/codeql-action/upload-sarif@v2
      if: always()
      with:
        sarif_file: 'trivy-results.sarif'

  # Notification Job
  notify:
    name: Notify Deployment
    runs-on: ubuntu-latest
    needs: [backend, frontend, security]
    if: always()
    
    steps:
    - name: Notify Success
      if: ${{ needs.backend.result == 'success' && needs.frontend.result == 'success' }}
      run: |
        echo "✅ CI/CD Pipeline completed successfully!"
        echo "Backend: ${{ needs.backend.result }}"
        echo "Frontend: ${{ needs.frontend.result }}"
        echo "Security: ${{ needs.security.result }}"

    - name: Notify Failure
      if: ${{ needs.backend.result == 'failure' || needs.frontend.result == 'failure' }}
      run: |
        echo "❌ CI/CD Pipeline failed!"
        echo "Backend: ${{ needs.backend.result }}"
        echo "Frontend: ${{ needs.frontend.result }}"
        echo "Security: ${{ needs.security.result }}"
