name: Advanced CI/CD Pipeline

on:
  push:
    branches: [ main, develop ]
  pull_request:
    branches: [ main ]
  workflow_dispatch:
    inputs:
      environment:
        description: 'Environment to deploy to'
        required: true
        default: 'dev'
        type: choice
        options:
        - dev
        - staging
        - prod

env:
  AWS_REGION: us-east-2
  ECR_REGISTRY: 942010118414.dkr.ecr.us-east-2.amazonaws.com
  BACKEND_REPOSITORY: billing-backend
  FRONTEND_REPOSITORY: billing-frontend
  CLUSTER_NAME: conservice-billing-cluster

jobs:
  test:
    name: Run Tests
    runs-on: ubuntu-latest
    
    steps:
    - name: Checkout code
      uses: actions/checkout@v4

    - name: Setup Node.js
      uses: actions/setup-node@v4
      with:
        node-version: '18'
        cache: 'npm'

    - name: Install backend dependencies
      run: |
        cd billing-backend
        npm ci

    - name: Run backend tests
      run: |
        cd billing-backend
        npm test

    - name: Install frontend dependencies
      run: |
        cd billing-frontend
        npm ci

    - name: Run frontend tests
      run: |
        cd billing-frontend
        npm test

  security-scan:
    name: Security Scan
    runs-on: ubuntu-latest
    
    steps:
    - name: Checkout code
      uses: actions/checkout@v4

    - name: Run Trivy vulnerability scanner
      uses: aquasecurity/trivy-action@master
      with:
        scan-type: 'fs'
        scan-ref: '.'
        format: 'sarif'
        output: 'trivy-results.sarif'

    - name: Upload Trivy scan results to GitHub Security tab
      uses: github/codeql-action/upload-sarif@v2
      with:
        sarif_file: 'trivy-results.sarif'

  build-and-push:
    name: Build and Push Docker Images
    runs-on: ubuntu-latest
    needs: [test, security-scan]
    
    strategy:
      matrix:
        service: [backend, frontend]
    
    steps:
    - name: Checkout code
      uses: actions/checkout@v4

    - name: Configure AWS credentials
      uses: aws-actions/configure-aws-credentials@v4
      with:
        aws-access-key-id: ${{ secrets.AWS_ACCESS_KEY_ID }}
        aws-secret-access-key: ${{ secrets.AWS_SECRET_SECRET_KEY }}
        aws-region: ${{ env.AWS_REGION }}

    - name: Login to Amazon ECR
      id: login-ecr
      uses: aws-actions/amazon-ecr-login@v2

    - name: Set up Docker Buildx
      uses: docker/setup-buildx-action@v3

    - name: Extract metadata
      id: meta
      uses: docker/metadata-action@v5
      with:
        images: ${{ env.ECR_REGISTRY }}/billing-${{ matrix.service }}
        tags: |
          type=ref,event=branch
          type=ref,event=pr
          type=sha,prefix={{branch}}-
          type=raw,value=latest,enable={{is_default_branch}}

    - name: Build and push image
      uses: docker/build-push-action@v5
      with:
        context: ./billing-${{ matrix.service }}
        platforms: linux/amd64
        push: true
        tags: ${{ steps.meta.outputs.tags }}
        labels: ${{ steps.meta.outputs.labels }}
        cache-from: type=gha
        cache-to: type=gha,mode=max

  deploy-dev:
    name: Deploy to Development
    runs-on: ubuntu-latest
    needs: build-and-push
    if: github.ref == 'refs/heads/develop' || github.ref == 'refs/heads/main'
    environment: dev
    
    steps:
    - name: Checkout code
      uses: actions/checkout@v4

    - name: Configure AWS credentials
      uses: aws-actions/configure-aws-credentials@v4
      with:
        aws-access-key-id: ${{ secrets.AWS_ACCESS_KEY_ID }}
        aws-secret-access-key: ${{ secrets.AWS_SECRET_SECRET_KEY }}
        aws-region: ${{ env.AWS_REGION }}

    - name: Update kubeconfig
      run: |
        aws eks update-kubeconfig --region ${{ env.AWS_REGION }} --name ${{ env.CLUSTER_NAME }}

    - name: Deploy with Helm
      run: |
        helm upgrade --install backend ./charts/backend --namespace default
        helm upgrade --install frontend ./charts/frontend --namespace default

    - name: Wait for deployment
      run: |
        kubectl rollout status deployment/backend --timeout=300s
        kubectl rollout status deployment/frontend --timeout=300s

    - name: Verify deployment
      run: |
        kubectl get pods
        kubectl get services
        kubectl get ingress

    - name: Run health checks
      run: |
        kubectl get pods -o jsonpath='{.items[*].status.containerStatuses[*].ready}' | grep -q true

  deploy-staging:
    name: Deploy to Staging
    runs-on: ubuntu-latest
    needs: build-and-push
    if: github.ref == 'refs/heads/main'
    environment: staging
    
    steps:
    - name: Checkout code
      uses: actions/checkout@v4

    - name: Configure AWS credentials
      uses: aws-actions/configure-aws-credentials@v4
      with:
        aws-access-key-id: ${{ secrets.AWS_ACCESS_KEY_ID }}
        aws-secret-access-key: ${{ secrets.AWS_SECRET_SECRET_KEY }}
        aws-region: ${{ env.AWS_REGION }}

    - name: Update kubeconfig
      run: |
        aws eks update-kubeconfig --region ${{ env.AWS_REGION }} --name ${{ env.CLUSTER_NAME }}

    - name: Deploy with Helm
      run: |
        helm upgrade --install backend ./charts/backend --namespace default
        helm upgrade --install frontend ./charts/frontend --namespace default

    - name: Wait for deployment
      run: |
        kubectl rollout status deployment/backend --timeout=300s
        kubectl rollout status deployment/frontend --timeout=300s

    - name: Run integration tests
      run: |
        # Add integration tests here
        echo "Running integration tests..."

  deploy-prod:
    name: Deploy to Production
    runs-on: ubuntu-latest
    needs: [build-and-push, deploy-staging]
    if: github.ref == 'refs/heads/main'
    environment: production
    
    steps:
    - name: Checkout code
      uses: actions/checkout@v4

    - name: Configure AWS credentials
      uses: aws-actions/configure-aws-credentials@v4
      with:
        aws-access-key-id: ${{ secrets.AWS_ACCESS_KEY_ID }}
        aws-secret-access-key: ${{ secrets.AWS_SECRET_SECRET_KEY }}
        aws-region: ${{ env.AWS_REGION }}

    - name: Update kubeconfig
      run: |
        aws eks update-kubeconfig --region ${{ env.AWS_REGION }} --name ${{ env.CLUSTER_NAME }}

    - name: Deploy with Helm
      run: |
        helm upgrade --install backend ./charts/backend --namespace default
        helm upgrade --install frontend ./charts/frontend --namespace default

    - name: Wait for deployment
      run: |
        kubectl rollout status deployment/backend --timeout=300s
        kubectl rollout status deployment/frontend --timeout=300s

    - name: Verify deployment
      run: |
        kubectl get pods
        kubectl get services
        kubectl get ingress

    - name: Run smoke tests
      run: |
        # Add smoke tests here
        echo "Running smoke tests..."

  cleanup:
    name: Cleanup
    runs-on: ubuntu-latest
    needs: [deploy-dev, deploy-staging, deploy-prod]
    if: always()
    
    steps:
    - name: Configure AWS credentials
      uses: aws-actions/configure-aws-credentials@v4
      with:
        aws-access-key-id: ${{ secrets.AWS_ACCESS_KEY_ID }}
        aws-secret-access-key: ${{ secrets.AWS_SECRET_SECRET_KEY }}
        aws-region: ${{ env.AWS_REGION }}

    - name: Cleanup old ECR images
      run: |
        aws ecr list-images --repository-name ${{ env.BACKEND_REPOSITORY }} --filter tagStatus=UNTAGGED --query 'imageIds[*]' --output json | jq -r '.[] | .imageDigest' | xargs -I {} aws ecr batch-delete-image --repository-name ${{ env.BACKEND_REPOSITORY }} --image-ids imageDigest={}
        aws ecr list-images --repository-name ${{ env.FRONTEND_REPOSITORY }} --filter tagStatus=UNTAGGED --query 'imageIds[*]' --output json | jq -r '.[] | .imageDigest' | xargs -I {} aws ecr batch-delete-image --repository-name ${{ env.FRONTEND_REPOSITORY }} --image-ids imageDigest={}
